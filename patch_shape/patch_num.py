"""
permutae all possible patches under constraints
"""
from itertools import product

SHAPES = {
        'shape_3_1_1_a':	((0, 2), (1, 0), (1, 1)),
        'shape_3_1_1_b':	((0, 0), (0, 2), (1, 1)),
        'shape_3_1_2_a':	((0, 2), (1, 0), (1, 2)),
        'shape_3_1_2_b':	((0, 0), (0, 1), (1, 1)),
        'shape_3_1_3_a':	((0, 0), (1, 1), (1, 2)),
        'shape_3_1_3_b':	((0, 1), (0, 2), (1, 0)),
        'shape_3_2_1_a':	((0, 0), (1, 0), (1, 1)),
        'shape_3_2_1_b':	((0, 0), (0, 2), (1, 0)),
        'shape_3_2_2_a':	((0, 0), (1, 0), (1, 2)),
        'shape_3_2_2_b':	((0, 0), (0, 1), (1, 0)),
        'shape_3_3':	    ((0, 0), (0, 1), (0, 2)),
        'shape_4_1_1_a':	((0, 2), (1, 0), (1, 1), (1, 2)),
        'shape_4_1_1_b':	((0, 0), (0, 1), (0, 2), (1, 1)),
        'shape_4_1_2_a':	((0, 1), (0, 2), (1, 0), (1, 1)),
        'shape_4_1_2_b':	((0, 0), (0, 2), (1, 1), (1, 2)),
        'shape_4_1_3_a':	((0, 2), (1, 0), (1, 1), (2, 1)),
        'shape_4_1_3_b':	((0, 2), (1, 0), (1, 2), (2, 1)),
        'shape_4_2_1_a':	((0, 0), (0, 1), (0, 2), (1, 0)),
        'shape_4_2_1_b':	((0, 0), (1, 0), (1, 1), (1, 2)),
        'shape_4_2_2_a':	((0, 0), (0, 1), (1, 0), (1, 1)),
        'shape_4_2_2_b':	((0, 0), (0, 2), (1, 0), (1, 2)),
        'shape_4_2_3_a':	((0, 0), (1, 0), (1, 1), (2, 1)),
        'shape_4_2_3_b':	((0, 2), (1, 0), (1, 2), (2, 0)),
        'shape_4_2_4_a':	((0, 0), (1, 0), (1, 2), (2, 1)),
        'shape_4_2_4_b':	((0, 2), (1, 0), (1, 1), (2, 0)),
        'shape_4_2_5_a':	((0, 0), (0, 2), (1, 0), (2, 1)),
        'shape_4_2_5_b':	((0, 2), (1, 0), (2, 0), (2, 1)),
        'shape_4_3_1_a':	((0, 0), (0, 2), (1, 0), (2, 0)),
        'shape_4_3_1_b':	((0, 0), (1, 0), (2, 0), (2, 1)),
        'shape_4_3_2_a':	((0, 0), (1, 0), (1, 1), (2, 0)),
        'shape_4_3_2_b':	((0, 0), (1, 0), (1, 2), (2, 0)),
        'shape_4_4':	    ((0, 0), (0, 2), (1, 0), (1, 1)),
        'shape_5_1_2_a':	((0, 0), (0, 2), (1, 1), (1, 2), (2, 1)),
        'shape_5_1_2_b':	((0, 2), (1, 1), (1, 2), (2, 0), (2, 1)),
        'shape_5_2_3_a':	((0, 0), (0, 1), (0, 2), (1, 0), (1, 1)),
        'shape_5_2_3_b':	((0, 0), (0, 2), (1, 0), (1, 1), (1, 2)),
        'shape_5_2_4_a':	((0, 2), (1, 0), (1, 1), (1, 2), (2, 0)),
        'shape_5_2_4_b':	((0, 0), (1, 0), (1, 1), (1, 2), (2, 1)),
        'shape_5_2_5_a':	((0, 2), (1, 0), (1, 2), (2, 0), (2, 1)),
        'shape_5_2_5_b':	((0, 0), (0, 2), (1, 0), (1, 1), (2, 1)),
        'shape_5_2_6_a':	((0, 2), (1, 0), (1, 1), (2, 0), (2, 1)),
        'shape_5_2_6_b':	((0, 0), (0, 2), (1, 0), (1, 2), (2, 1)),
        'shape_5_2_7_a':	((0, 0), (0, 2), (1, 1), (1, 2), (2, 0)),
        'shape_5_2_7_b':	((0, 0), (1, 1), (1, 2), (2, 0), (2, 1)),
        'shape_5_3_1_a':	((0, 0), (0, 2), (1, 0), (1, 1), (2, 0)),
        'shape_5_3_1_b':	((0, 0), (1, 0), (1, 2), (2, 0), (2, 1)),
        'shape_5_3_2_a':	((0, 0), (0, 2), (1, 0), (1, 2), (2, 0)),
        'shape_5_3_2_b':	((0, 0), (1, 0), (1, 1), (2, 0), (2, 1)),
        'shape_5_5_1':	    ((0, 2), (1, 0), (1, 1), (1, 2), (2, 1)),
        'shape_5_5_2':	    ((0, 0), (1, 0), (1, 1), (1, 2), (2, 0)),
        'shape_5_5_3':	    ((0, 0), (0, 2), (1, 0), (2, 0), (2, 1)),
        'shape_6_2_1_a':	((0, 0), (0, 2), (1, 0), (1, 1), (1, 2), (2, 1)),
        'shape_6_2_1_b':	((0, 2), (1, 0), (1, 1), (1, 2), (2, 0), (2, 1)),
        'shape_6_3_2_a':	((0, 0), (0, 2), (1, 0), (1, 1), (1, 2), (2, 0)),
        'shape_6_3_2_b':	((0, 0), (1, 0), (1, 1), (1, 2), (2, 0), (2, 1)),
        'shape_6_3_3_a':	((0, 0), (0, 2), (1, 0), (1, 1), (2, 0), (2, 1)),
        'shape_6_3_3_b':	((0, 0), (0, 2), (1, 0), (1, 2), (2, 0), (2, 1)),
        'shape_6_6':	    ((0, 0), (0, 2), (1, 1), (1, 2), (2, 0), (2, 1)),
}

PHOS_RES=['R','K','Y','H','S','T']

# patch constraints
def check_patch(shape_name,patch):
        patch_shape = SHAPES[shape_name]
        for r in patch:
            if not r in PHOS_RES:
                return 0
        for i,r in enumerate(patch):
            if r == 'S' or r == 'T':
                if patch_shape[i][1] == 0:
                    return 0
        if patch.count('R') < 1:
            return 0
        if patch.count('T') + patch.count('S') > 2:
            return 0
        return 1

PATCHES = {}
total = 0

for sha,pat in SHAPES.iteritems():
    res_len = len(pat)
    num = 0
    for i in product('RKYHST',repeat=res_len):
        if check_patch(sha,''.join(i)):
            num += 1
            total += 1
    PATCHES[sha] = num

print total
